syntax = "proto3";
package zetachain.zetacore.observer;

import "common/common.proto";
import "gogoproto/gogo.proto";
import "observer/blame.proto";
import "observer/crosschain_flags.proto";
import "observer/observer.proto";
import "observer/params.proto";

option go_package = "github.com/zeta-chain/node/x/observer/types";

// Msg defines the Msg service.
service Msg {
  rpc AddObserver(MsgAddObserver) returns (MsgAddObserverResponse);
  rpc UpdateCoreParams(MsgUpdateCoreParams) returns (MsgUpdateCoreParamsResponse);
  rpc AddBlameVote(MsgAddBlameVote) returns (MsgAddBlameVoteResponse);
  rpc UpdateCrosschainFlags(MsgUpdateCrosschainFlags) returns (MsgUpdateCrosschainFlagsResponse);
  rpc UpdateKeygen(MsgUpdateKeygen) returns (MsgUpdateKeygenResponse);
  rpc AddBlockHeader(MsgAddBlockHeader) returns (MsgAddBlockHeaderResponse);
}

message MsgAddBlockHeader {
  string creator = 1;
  int64 chain_id = 2;
  bytes block_hash = 3;
  int64 height = 4;
  common.HeaderData header = 5 [(gogoproto.nullable) = false];
}

message MsgAddBlockHeaderResponse {}

message MsgUpdateCoreParams {
  string creator = 1;
  CoreParams coreParams = 2;
}

message MsgUpdateCoreParamsResponse {}

message MsgAddObserver {
  string creator = 1;
  string observer_address = 2;
  string zetaclient_grantee_pubkey = 3;
  bool add_node_account_only = 4;
}

message MsgAddObserverResponse {}

message MsgAddBlameVote {
  string creator = 1;
  int64 chain_id = 2;
  Blame blame_info = 3;
}

message MsgAddBlameVoteResponse {}

message MsgUpdateCrosschainFlags {
  string creator = 1;
  bool isInboundEnabled = 3;
  bool isOutboundEnabled = 4;
  GasPriceIncreaseFlags gasPriceIncreaseFlags = 5;
}
message MsgUpdateCrosschainFlagsResponse {}

message MsgUpdateKeygen {
  string creator = 1;
  int64 block = 2;
}

message MsgUpdateKeygenResponse {}
