syntax = "proto3";
package zetachain.zetacore.crosschain;

import "common/common.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/zeta-chain/node/x/crosschain/types";

// Msg defines the Msg service.
service Msg {
  rpc AddToOutTxTracker(MsgAddToOutTxTracker) returns (MsgAddToOutTxTrackerResponse);
  rpc RemoveFromOutTxTracker(MsgRemoveFromOutTxTracker) returns (MsgRemoveFromOutTxTrackerResponse);
  rpc CreateTSSVoter(MsgCreateTSSVoter) returns (MsgCreateTSSVoterResponse);
  rpc GasPriceVoter(MsgGasPriceVoter) returns (MsgGasPriceVoterResponse);
  rpc NonceVoter(MsgNonceVoter) returns (MsgNonceVoterResponse);
  rpc VoteOnObservedOutboundTx(MsgVoteOnObservedOutboundTx) returns (MsgVoteOnObservedOutboundTxResponse);
  rpc VoteOnObservedInboundTx(MsgVoteOnObservedInboundTx) returns (MsgVoteOnObservedInboundTxResponse);
  rpc WhitelistERC20(MsgWhitelistERC20) returns (MsgWhitelistERC20Response);
  rpc UpdateTssAddress(MsgUpdateTssAddress) returns (MsgUpdateTssAddressResponse);
  //  rpc ProveOutboundTx(MsgProveOutboundTx) returns (MsgProveOutboundTxResponse);
}

message MsgUpdateTssAddress {
  string creator = 1;
  string tss_pubkey = 2;
}

message MsgUpdateTssAddressResponse {}

message MsgWhitelistERC20 {
  string creator = 1;
  string erc20_address = 2;
  int64 chain_id = 3;
  string name = 4;
  string symbol = 5;
  uint32 decimals = 6;
  int64 gas_limit = 7;
}

message MsgWhitelistERC20Response {
  string zrc20_address = 1;
  string cctx_index = 2;
}

message MsgAddToOutTxTracker {
  string creator = 1;
  int64 chain_id = 2;
  uint64 nonce = 3;
  string tx_hash = 4;
  common.Proof proof = 5;
  string block_hash = 6;
  int64 tx_index = 7;
}

message MsgAddToOutTxTrackerResponse {}

message MsgRemoveFromOutTxTracker {
  string creator = 1;
  int64 chain_id = 2;
  uint64 nonce = 3;
}

message MsgRemoveFromOutTxTrackerResponse {}

message MsgCreateTSSVoter {
  string creator = 1;
  string tss_pubkey = 2;
  int64 keyGenZetaHeight = 3;
  common.ReceiveStatus status = 4;
}

message MsgCreateTSSVoterResponse {}

message MsgGasPriceVoter {
  string creator = 1;
  int64 chain_id = 2;
  uint64 price = 3;
  uint64 block_number = 4;
  string supply = 5;
}

message MsgGasPriceVoterResponse {}

message MsgNonceVoter {
  string creator = 1;
  int64 chain_id = 2;
  uint64 nonce = 3;
}

message MsgNonceVoterResponse {}

message MsgVoteOnObservedOutboundTx {
  string creator = 1;
  string cctx_hash = 2;
  string observed_outTx_hash = 3;
  uint64 observed_outTx_blockHeight = 4;
  uint64 observed_outTx_gas_used = 10;
  string observed_outTx_effective_gas_price = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  uint64 observed_outTx_effective_gas_limit = 12;
  string value_received = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"value_received\""
  ];
  common.ReceiveStatus status = 6;
  int64 outTx_chain = 7;
  uint64 outTx_tss_nonce = 8;
  common.CoinType coin_type = 9;
}

message MsgVoteOnObservedOutboundTxResponse {}

message MsgVoteOnObservedInboundTx {
  string creator = 1;
  string sender = 2;
  int64 sender_chain_id = 3;
  string receiver = 4;
  int64 receiver_chain = 5;
  //  string zeta_burnt = 6;
  string amount = 6 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false
  ];
  //  string mMint = 7;
  string message = 8;
  string in_tx_hash = 9;
  uint64 in_block_height = 10;
  uint64 gas_limit = 11;
  common.CoinType coin_type = 12;
  string tx_origin = 13;
  string asset = 14;
}

message MsgVoteOnObservedInboundTxResponse {}

message MsgSetNodeKeys {
  string creator = 1;
  common.PubKeySet pubkeySet = 2;
  string tss_signer_Address = 3;
}

message MsgSetNodeKeysResponse {}
